成员变量和局部变量的区别
	1：在类中的位置不同
		成员变量：在类中的方法外；
		局部变量：在方法定义中或者方法声明上；
	2：在内存中的位置不同
		成员变量：在堆内存
		局部变量：在栈内存
	3：生命周期不同
		成员变量：随着对象的创建而存在，随着对象的消失而消失
		局部变量：随着方法的调用而存在，随着方法的调用完毕而消失	
	4：初始化值不同
		成员变量：有默认初始化值；
		局部变量：没有默认初始化值，必须定义赋值，然后才能使用 

	注意事项：
		局部变量名称可以和成员变量的名称一样，在方法中使用的时候，采用的是就近原则。


引用类型：类、接口、数组；

如果一个方法的形式参数是一个类类型（引用类型），这里其实需要的是该类的对象。 

匿名对象：没有名字的对象；
	应用场景：1：调用方法，仅仅只调用一次的时候；
			注意：调用多次的时候不适合；
			优势：匿名对象调用完毕就是垃圾，可以被垃圾回收器回收；
	          2：匿名对象可以作为实际参数传递；如： sd.show(new Student());

通过对象去给成员变量赋值，可以赋值一些非法的数据，这是不合理的。应该在赋值之前，先对数据进行判断。测试类一般只创建对象，调用方法。

封装：隐藏对象的属性和实现细节，仅对外提供公共访问方式。
	好处：1：隐藏属性细节，提供公共的访问方式
	      2：提高了代码的复用性
	      3：提高安全性
	封装原则：
		1：将不需要对外提供的内容都隐藏起来
		2：把属性隐藏，提供公共方法对其访问

private 最常见的应用：
	1：把成员变量用private修饰
	2：提供对应的getXxx()和setXxx()方法，并且用public修饰，从而对private修饰的成员变量进行赋值；

this:是当前类的对象引用，即代表当前类的一个对象。
	注意：哪个调用这个方法，在该方法内部的this就代表哪个对象。
this的场景：
	解决局部变量隐藏成员变量

构造方法：给对象的数据进行初始化，
 	格式：
 		1：方法名与类名相同；
 		2：没有返回值，连void都没有；
 		3：没有具体的返回值 。
 	注意事项：
 		1：如果没有给出构造方法，系统会自动提供一个无参构造；
 		2：如果给出了构造方法（不管带参还是无参），系统将不会再提供默认的无参构造。
 	给成员变量赋值有两种方式：
 		1：setXxx()；
 		2：带参构造方法；

类的组成：成员变量、成员方法、构造方法；

成员方法：
	根据返回值：
		void类型
		非void类型
	形式参数：
		空参方法
		非空参方法

什么时候定义成员变量：
	如果这个变量是用来描述这个类的信息的，那么，该变量就应该定义为成员变量。

变量的范围是越小越好，因为能及时的被回收。

static:
	修饰的成员时被所有对象共享；
	成员变量被所有对象共享的，那么他就应该定义为静态的。
	特点：
		1.随着类的加载而加载；
		2.优先于对象存在；
		3.被类的所有对象共享；
		4.可以通过类名调用；
			其实它本身也可以通过对象名调用
			推荐使用类名调用
	静态修饰的内容称为：与类相关的。
	注意事项：
		1.在静态方法中没有this对象
		2.静态只能访问静态

piblic: 公共的，访问权限是最大的，由于main方法是被jvm调用，所以权限要够大。
static: 静态的，不需要创建对象，直接由类名就可以，方便jvm调用。
void: 因为我们曾经说过方法的返回值是返回给调用者，而main方法是被jvm调用，返回给jvm没有意义。
main:是一个常见的方法入口。
String[] args：这是一个字符串数组。早期是为了接收键盘录入的数据，提高程序灵活性
	格式：java MainDemo hello world java.

构造方法中可以有return语句，格式：return;
任意void类型的方法的最后都可以写上：return;  

Student s = new Student(); //做了那些事情？
	1.把student.class文件加载到内存
	2.在栈内存为s开辟空间

对象引用超过其作用范围，将对象赋值为null都将被视为垃圾，被垃圾回收器在其空闲的时候进行回收;
	3.在堆内存为学生对象申请空间
	4.给学生的成员变量进行默认初始化。null，0；
	5.给学生的成员变量进行显示初始化
	6.通过构造方法给成员变量进行初始化。
	7.对象构造完毕，把堆内存的地址值赋值给栈内存的s变量。