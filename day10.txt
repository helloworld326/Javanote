形式参数：
	基本类型；
	引用类型：
		1.类:需要的是该类的对象；如：匿名方法；
		2.抽象类：需要的该抽象类对象的具体子类对象；
		3.接口：需要的是该接口的实现类对象;

返回值类型：
	基本类型；
	引用类型：
		类：返回的是该类的对象；
		抽象类：返回的是抽象的子类对象；
		接口：返回的是该接口实现类的对象；

链式编程：
	每次调用完毕后，返回的是一个对象；

               同一个类中    同一个包子类，其他类    不同包子类   不同包其他类

public             Y                Y                     Y             Y

protected          Y                Y                     Y

默认的             Y                Y

private            Y

构造方法只能使用权限修饰符;

static可以修饰内部类；
static内部类访问的外部类数据必须用static修饰；


内部类：把类定义在其他类的内部； 

内部类的访问的特点：
	1.内部类可以访问外部类的成员，包括私有；
	2.外部类要访问内部类的成员，必须创建对象；

内部类的位置：
	成员位置：在成员位置定义的的类，成员内部类； 访问格式：外部类名.内部类名 对象名 = 外部类对象.内部类对象；//如：Outer.Inner oi = new Outer().new Inner();
	局部位置：在局部位置定义的类，局部内部类；

	成员内部类被静态修饰后的访问方式是；
		格式：外部类名.内部类名 对象名 = new 外部类名.内部类名();//如：Outer.Inner oi = new Outer.Inner();

	notes:
		1.内部类和外部类没有继承关系；
		2.通过外部类限定this对象；

面试题：
	局部内部类访问局部变量的注意事项；
		1.局部内部类访问局部变量必须用final修饰（即一个方法中）；因为局部方法随着方法的调用而调用，随着调用完毕而消失；而堆内存的内容并不会立即消失，所以，我们加final修饰；

匿名内部类：(本质上是一个继承了该类或者实现该接口的匿名对象)
	内部类的简化写法；
	前提：
		存在一个类或者接口，这里的类也可以是具体的类；
	格式：new 类名或者接口(){
			方法重写;
		}；


面试题：

interface Inter{
	void show();
}

class Outer{

}

public class OuterDemo {

	public static void main(String[] args) {
		Outer.method().show();
	}

}

在控制台输出“HelloWorld”

答案： 

package FaceTest;

interface Inter{
	void show();
}

class Outer{
	public static Inter method(){
		return new Inter(){
			public void show(){
				System.out.println("HelloWorld");
			}
		};
	}
}

public class OuterDemo {

	public static void main(String[] args) {
		Outer.method().show();
	}

}
