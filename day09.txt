由于继承中方法有一个现象：方法重写；所以，父类的功能，就会被子类给覆盖掉，所以引用final；

final:通常，可以修饰类，方法，变量；

特点：
	final可以修饰类，该类不能被继承;
	final可以修饰方法，该方法不能被重写;
	final可以修饰变量, 该变量不能被重新赋值，这个变量就是常量；

常量：
	1.字面值常量
		"Hello",10,true;
	2.自定义常量
		final int x = 10;

final面试题：
	1.final修饰局部变量
		基本类型：基本类型不能发生改变；
		引用类型：引用类型的地址值不能发生改变，但是，该对象的堆内存的值是可以改变的；	// ?
	2.final修饰变量的初始化时机
		1.被final修饰的变量只能赋值一次；
		2.在构造方法完毕前(非静态变量);

出现new关键字，可从右往左理解；

多态：
	同一个对象，在不同时刻体现出来的不同状态；
	如：猫是猫，猫也是动物；水(液态、固态、气态)；

	多态的前提：
		1.要有继承或者实现关系；
		2.要有方法重写；
			其实没有也可以，但是没有多态就没有意义；
		3.要有父类引用指向子类；
			父 f = new 子();

	多态中的成员访问特点：
		1.成员变量；
			编译看左边，运行看左边；
		2.构造方法；
			创建子类对象的时候，访问父类的构造方法，对父类的数据进行初始化；
		3.成员方法；
			编译看左边，运行看右边；
		4.静态方法；(静态和类相关，算不上重写，访问还是左边的)  //？
			编译看左边，运行看左边;

		由于成员方法存在方法重写，子类的方法会把父类的覆盖，所以运行看右边；

	多态的好处：
		1.提高了代码的维护性；(继承保证)
		2.提高了代码的扩展性；(多态保证)

	多态的弊端：
		1.不能使用子类的内容；
	
	父类调用子类方法
		1.创建子类对象调用方法；
		2.把父类的引用赋值给子类的引用；(向下转型)

ClassCastException:类转换异常;向下转型中出现
 

抽象：
	1.抽象类中不一定有抽象方法，但是有抽象方法的类必须定义为抽象类；
	2.抽象类不能实例化；因为它不是具体的；抽象类有构造方法，但不能实例化，构造方法的作用是用于子类访问父类数据的初始化；
	3.抽象类的子类：
		1.如果不重写抽象方法，该子类是一个抽象类；
		2.重写所有的抽象方法，该子类是一个具体的类；
		
	抽象的实例化是靠具体的子类实现的，是多态的方式； 如: Animal a = new Cat();	

	抽象类的成员特点：
		1.成员变量；变量或者常量;
		2.成员方法；既可以是抽象的，也可以是非抽象的；
		3.构造方法；有；用于子类访问父类数据的初始化；

	抽象类的成员方法特性：
		1.抽象方法 强制要求子类做的事情；子类必须重写父类抽象方法；
		2.非抽象方法 子类继承的事情，提高代码的复用性；

一个类如果没有抽象方法，可以定位抽象类；不让创建对象；
abstract不能和private、final、static共存；
private 冲突，子类不能继承，从而不能被重写；
final 冲突，不能被重写；
static 无意义；抽象方法没有方法体，访问无意义；

所有的类都默认继承自一个类--Object类；
类Object是类层次结构的根类，每个类名都使用Object作为超类；

接口的特点: //接口名+Impl这种格式是接口的实现类格式；
	1.接口用关键字interface表示 
		interface 接口名 {}
	2.类实现接口用implements表示；
		class 类名 implements 接口名{}
	3.接口是抽象类，不能实例化；
	4.接口的子类
		1.可以是抽象类，但是意义不大；（还需要子类去实例化）
		2.也可以是具体类，要重写接口中的所有抽象方法；（推荐）；

	由此可见多态分为：
		1.具体类多态；（几乎没有）
		2.抽象类多态；（常用）
		3.接口多态；（最常用）

	接口的特点：
		成员变量：只能是常量，并且是静态，默认修饰符public static final（可以通过接口名访问）；
				//完整版格式：public static final int n = 30;
		构造方法：接口没有构造方法；
		成员方法：只能是抽象方法，默认修饰符 public abstract,建议:自己手动给出；

抽象类和接口的区别：
	1.成员区别：
		抽象类：
			成员变量：可以变量，也可以常量；
			构造方法：有；
			成员方法：可以抽象，也可以非抽象；
		接口：
			成员变量：常量；
			成员方法：只可以抽象；

	2.关系区别：
		类与类：继承，单继承；
		类与接口：实现，单实现，多实现；
		接口与接口：继承，单继承，多继承；

	3.设计理念的不同：
		抽象类：“is a”的关系；抽象类中定义的是该继承体系的共性功能；
		接口：“like a”的关系；接口中定义的是该继承体系的扩展功能；

一个类没有抽象方法却定义了抽象类，是为了不让创建对象；

interface关键字的编译后仍然会产生.class文件;

多态中，成员变量没有多态性，方法调用只能调用父类和子类共有的功能;