代码块：
	局部代码块：局部位置，用于限定变量的生命周期；
	构造代码块：在类中的成员位置，每次调用构造方法执行前，都会先执行构造代码块；
		作用：可以把多个构造方法中的共同代码放到一起，对对象进行初始化。
	静态代码块：在类中成员位置，用static修饰，对类进行初始化，静态代码块只加载一次。且静态代码块会优先执行。

	面试题：
		静态代码块，构造代码块，构造方法的执行顺序？
			静态代码块 -- 构造代码块 -- 构造方法；

在同一个文件夹下，类定义在两个文件夹下和定义一个文件夹下的作用是一样的。

方法改进为静态后，就可以直接通过类名调用；

如何制作一个说明书?
	1.写一个工具类；
	2.对这个类加入文档注释；
	3.用工具解析文档注释；
		javadoc工具；
	4:格式

制作帮助文档出错：
	找不到可以文档化的公共或受保护的类：告诉我们类的权限不够；

如何使用帮助文档：
	1.看包，
		java.lang包下的类不需要导入，其他的全部需要导入。
	2.看类的结构：
		成员变量	字段摘要
		构造方法	构造方法摘要
		成员方法	方法摘要
	3.学习构造方法
		1.有构造方法，创建对象
		2.无构造方法，成员可能都是静态的；//为什么就不需要构造方法；
	4.看成员方法：
		1.左右：
			是否静态，如果静态，可以通过类名调用
			返回值类型；
		2.右边：
			看方法名；
			

继承：
	概述：把多个类中相同的内容给提取出来定义到一个类中。

	格式：
		clas 子类 extends 父类名{};

	好处：提高了代码的复用性，提高了代码的维护性，让类与类之间产生了关系，是多太前提

	类与类产生关系，其实也是继承的一个弊端：
		类的耦合性增强了。

	开发原则：低耦合，高内聚；
	耦合：类与类的关系；
	内聚：就是自己完成某件事情的能力；
	
	特点：Java中支持单继承，不支持多继承；
	      Java中支持多层继承（继承体系）；如：儿子 -- 父亲 --祖父；

	继承的注意事项：
		1.子类只能继承父类所有非私有的成员（成员方法和成员变量）；
		2.子类不能继承父类的构造方法，但是可以通过关键字super去访问父类构造方法；
		3.不要为了部分功能去继承；

	什么时候采用继承？
		采用假设法；继承其实体现的是一种关系："is a"；

	继承中成员变量的关系：
		1.子类中的成员变量和父类中的成员变量名不一样；
		2.子类中的成员变量和父类中的成员变量名称一样；
		    在子类方法中访问一个变量的顺序：
			1.在子类方法的局部范围找，有就使用 return；
			2.在子类的成员范围，有就使用 return；
			3.在父类局部范围找，有就使用 return；
			4.如果找不到，就报错；

this和super的区别：
	this代表本类对应的引用；
	super代表父类存储空间的标识（理解为父类的引用）；

	1.调用成员变量：
		this.成员变量	调用本类的成员变量；
		super.成员变量	调用父类的成员变量；
	2.调用构造方法：
		this(...) 	调用本类的构造方法；
		super(...)	调用父类的构造方法；
	3.调用成员方法
		this.成员方法	调用本类的成员方法；
		super.成员方法	调用父类的成员方法；

继承中构造方法的关系
	1.子类中所有的构造方法都会默认访问父类中空参数的构造方法；
	原因？
		因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化。而构造方法就是对成员变量进行初始化操作的。
	注意：子类的每一个构造方法的第一条语句默认都是：super();

	如果父类没有无参构造方法，那么子类的构造方法会出现什么情况？怎么解决？
		报错；1.在父类中添加一个无参；
		      2.子类通过super去显示调用父类其他的带参的构造方法；
		      3.子类
	注意：this(...)和super(...)必须出现在第一条语句；
		如果不是放在第一条语句上，就可能对父类的数据进行了多次初始化，所以必须放在第一条；

一个类的初始化过程：
	成员变量的初始化：
		1.默认初始化；
		2.显示初始化；
		3.构造方法初始化；

	子父类的初始化：(分层初始化)
		先进行父类初始化，然后再进行子类初始化；

	问题：
		虽然子类中构造方法默认有一个super();
		初始化的时候，不是按照那个顺序执行的；
		而是按照分层初始化进行的；
		仅仅表示要先初始化数据，再初始化子类数据。

继承中成员方法的关系：
	1.子类中的方法和父类中的方法声明不一样，
	2.子类中的方法和父类中的方法声明一样，
		通过子类对象调用方法：
			1.先找子类，看有没有这个方法，有就用
			2.再看父类，有没有，有就用
			3.都没有就报错；
	
方法重写的应用：
	当子类需要父类的时候，而功能主体子类有自己特有的内容时，可以重写父类的中的方法；用关键字super实现；

面试题：

方法重写和方法重载的区别：
	方法重写：Override 子类中出现的和父类中方法声明一模一样的方法；
	方法重载：Overload 本类中出现的方法名一样，参数列表不同的方法；能改变返回值类型，因为他和返回值类型无关；