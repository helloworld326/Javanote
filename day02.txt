不包的命名一般全是小写。其实质是文件夹，用于把相同的类名进行区分。

类或者接口的命名：
	一个单词：单词的首字母必须大写
	多个单词：每个单词的首字母必须大写。

方法或者变量的命名;
	一个单词：单词的首字母小写。
	多个单词：从第二个单词开始每个单词的首字母必须大写

常量的命名：
	一个单词：全部大写；
	多个单词：每个字母都大写，用_隔开；

文档注释：/**	*/
	被javadoc工具解析生成一个说明书；

二进制：以0b开头（数字0）；
八进制：以0开头；
十六进制：以0x开头；

数据类型分类：
	引用数据类型：类、接口、数组
	基本数据类型：
			类型	字节	位
		整数：
			byte	1	8
			short	2	16
			int	4	32
			long	8	64
		浮点数：
			float	4
			double	8
		字符：
			char	2
		布尔
			boolean	1
	注意：
		整数默认是int类型
		浮点数默认是double类型
		long需要加上后缀L; 

变量问题：
	1：作用域：变量定义在哪个大括号内，它就在这个大括号内有效。并且，在同一		   个大括号内不能同时定义同名的变量。

	2：初始化值：
		   没有初始化值的变量不能直接使用。

java语言中的字符char可以存储一个中文汉字，因为java语言的字符占用两个字节。

java语言采用的是Unicode编码。

&表示逻辑与，|表示逻辑或，！表示逻辑非
&&只要左边是false右边则不执行,可以提高程序效率，最终结果会是false，同理||也是。
	开发中常用逻辑运算符：&&，||，!

位运算：&，|，^，~
	注意：
		要做位运算，首先要将数据转换为二进制。
	&与位运算：有0则0；

	|或位运算：有1则1；

	^异或位运算：相同则0，不同则1；
		^的特点：某一个数据被另一个数据位异或两次结果不变；
			可应用简单的数据加密或者交换两数的值
			如：
				int a=10,b=20;
				a = a ^ b;
				b = a ^ b;//a ^ b ^ b = a;
				a = a ^ b;//a ^ b ^ a = b;
				结果：
					a = 20;b = 10;

	~按位取反运算：0变1，1变0；
	
<<:左移动 左边最高位丢弃，右边补齐0；

>>:右移动 最高为是0，左边补0；最高位是1，左边补齐1；

>>>:无符号右移 左边补齐0，无论最高位是0还是1；

三元运算符实现的都可以采用if语句实现，反之不成立。当if语句控制的操作是一个操作语句的时候不能用三元运算符改进。

+的用法：
	1：加法；
	2：正号；
	3：字符串连接(左结合);

最有效率的计算方式计算2*8的结果：
	2 << 3;

switch语句的注意事项：
	1：case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的
	2：default可以省略，但是不建议，因为它的作用是对不正确的情况给出提示

break:离开switch和循环场景无意义;
	跳出多层循环：
		格式：
			标签名：语句

continue:跳出一次循环，执行下一次循环

+=可以进行强制类型转换;

